{
  "name": "header-stack",
  "description": "A `StreamStack` subclass that parses headers until an emtpy line is found.",
  "tags": [
    "headers",
    "parser",
    "stream",
    "stack",
    "stream-stack"
  ],
  "version": "0.1.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/node-header-stack.git"
  },
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net",
    "url": "http://tootallnate.net"
  },
  "main": "./index.js",
  "dependencies": {
    "stream-stack": ">= 1.1.1",
    "bufferlist": ">= 0.0.6",
    "bufferjs": ">= 0.2.3"
  },
  "directories": {
    "lib": "."
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "./tests/go.sh"
  },
  "files": [],
  "devDependencies": {},
  "readme": "node-header-stack\n=================\n### A `StreamStack` subclass that parses headers until an emtpy line is found.\n\n\nThis module can be used to parse \"headers\" from a `ReadableStream` until an empty\nline is found. \"headers\" is a somewhat broad term that has a lot of edge-cases,\nbut this parser can be used to parse HTTP headers, MIME e-mail headers, CGI script\nheaders, multipart headers, and I'm sure much more.\n\nThe parser by default only emits a single _'headers'_ event when the end of the\nheaders have been reached. It can optionally emit a _'firstLine'_ event after the\nfirst line has been parsed (useful for HTTP, off by default). See below for the\nother parsing options available.\n\n\nAPI\n---\n\n### new Parser([readableStream] [, options]) -> parser\n\nCreates a new `Parser` instance that will parse headers. If a _readableStream_ is passed\nin (optional), then 'data' events from it will be used to parse the header. An\noptional _options_ argument may also be provided. Recognized options are:\n\n  - `emitFirstLine` - (Default _false_) - If set to _true_, then the first line\n       that gets parsed by the Parser won't be treated like a header line, but\n       instead will be given back to the user in a _'firstLine'_ event.\n\n  - `strictCRLF` - (Default _false_) - If set to _true_, then ONLY CRLF values\n       will be allowed for the line delimiter. If _false_, then both CRLF and\n       lone LF will be valid delimiters.\n\n  - `strictSpaceAfterColon` - (Default _false_) - If set to _true_, an `error`\n       will be emitted if a header is found without a space after the delimiter\n       colon. If _false_ then a space after the colon will be optional.\n\n  - `allowFoldedHeaders` - (Default _false_) - If set to _true_ then folded headers\n       will be allowed. Folded headers are headers lines that start with whitespace,\n       and are intended to be concatenated with the previous header. If _false_, then\n       the parse will throw an error if a folded header is encountered.\n\n\n#### parser.parse(b) -> undefined\n\nIf no `readableStream` instance was passed into the Parser constructor, then you\nhave to option to manually call `parse(buffer)` to do the parsing.\n\n\n#### parser event 'headers' -> function(headers, leftover)\n\nEmitted when the end of the headers has been parsed. _headers_ is a `Headers` instance,\nwhich is a special Array subclass with other helper functions. _leftover_ __may__ be\na Buffer with any leftover data the Parser received before finishing, it will be the\nbeginning of anything after the headers, and should be fed into whatever is parsing\nthe Stream next.\n\n\n#### parser event 'error' -> function(err)\n\nEmitted if a malformed header line is encountered. i.e. a header line without a\nvalid delimiter. If this is emitted, then a _'headers'_ event will _NOT_ be emitted.\n\n\n### new Headers() -> headers\n\nThe `Headers` class is an Array subclass that has some additional helper functions\nto use and mutate the headers easily.\n\n\n#### headers.addHeader(key, value) -> undefined\n\nAdds a new header to the end of the list of headers with the given _key_ and _value_.\n\n\n#### headers.toString([ options ]) -> undefined\n\nThe `toString` function of the `Headers` class can be used to turn a headers instance\nback into it's sendable form. The default options are for the most common use cases,\nbut you may specify:\n\n  - `firstLine` - (Default _false_) - If set to a String instance, then the given string\n       will be used as the first line of the output string (useful for HTTP).\n\n  - `delimiter` - (Default _'\\\\r\\\\n'_) - The delimiter that should be used in between\n       each header and to signify the end of the headers.\n\n  - `emptyLastLine` - (Default _true_) - If _true_ then the returned String will contain\n       another \"delimiter\" at the end, to signify the end of the headers.\n\n\n\n[Node]: http://nodejs.org\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TooTallNate/node-header-stack/issues"
  },
  "homepage": "https://github.com/TooTallNate/node-header-stack",
  "_id": "header-stack@0.1.3",
  "dist": {
    "shasum": "776f8fd5de3fd50e875ce28f53ebf64a9c6b1f87"
  },
  "_from": "header-stack@>= 0.0.2",
  "_resolved": "https://registry.npmjs.org/header-stack/-/header-stack-0.1.3.tgz"
}
