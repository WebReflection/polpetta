#!/usr/bin/env node

/**
 * ---------------------------------------------------------
 *       (က) Polpetta, any folder is served spiced
 * ---------------------------------------------------------
 * @license   Mit Style License
 * @author    Andrea Giammarchi
 * @twitter   WebReflection
 * ---------------------------------------------------------
 * You can ./polpetta ~/any/folder and use it as a temporary webserver
 * Initial idea was to hack limits with browsers and local files
 * Current idea is to make it a complete webserver ... enjoy!
 */

// constants as configuration
const

  LIST_FILES_AND_FOLDERS = true,  // display the list of files
                                  // if no index.njs, index.html or htm is found

  STREAM_FILES_BIGGER_THAN = 1024 * 512,
                                  // 0 to always stream files
                                  // N as amount of bytes


  HOST_NAME = process.env.IP || "localhost",
                                  // default host name

  HOST_INITIAL_PORT = process.env.PORT || 1337,
                                  // choose a port to start with
                                  // this is for automatic port recognition
                                  // if argument [port] is not provided

  HTACCESS_NAME = ".htaccess"     // experimental .htaccess name
;

// after this point, if you don't know what you are doing .. please DON'T !!!


function ResponseSwitch() {
  var request = this.request;
  switch(request.method) {
    case "GET":
      // retrieve path info
      fsStat.call(this);
      break;
    case "POST":
      var
        contentType = request.headers["content-type"] ||
                      // ... just in case ...
                      request.headers["Content-Type"] ||
                      // while here something is probably wrong
                      "",
        chunks = []
      ;
      // files involved ?
      if (
        ~contentType.indexOf("multipart/form-data;") &&
        BOUNDARY_MATCH.test(contentType)
      ) {
        // grab files
        request.setEncoding("binary");
        defineKnownProperty(
          this,
          "boundary",
          chunks.boundary = RegExp.$1
        );
      }
      // prepare chunks
      chunks.polpetta = this;
      request.addListener(
        "data", chunks.push.bind(chunks)
      );
      request.addListener(
        "end", endOfChunks.bind(chunks)
      );
      break;
  }
}
function addPathSlashes(path) {
  return path.replace(
    PATH_SLASHES, "\\$1"
  );
}
function assignExt() {
  return this.ext = path.extname(this.path);
}
function createPathReplacer(find, place) {
  var re = RegExp(
    addPathSlashes(find), "g"
  );
  return function (path) {
    return path.replace(
      re, place
    );
  };
}

function defineGPF(self, property, bound) {
  return defineKnownProperty(
    self,
    property,
    withKeysMethod(
      getValue,
      bound
    )
  )[property];
}
// remove received, chunks, and i, after
function endOfChunks() {
  this.callback = fsStat.bind(this.polpetta);
  if (this.boundary) {
    this.i = 0;
    this.received = {};
    this.posted = [];
    this.join("").split(this.boundary).forEach(
      endOfChunks.forEach, this
    );
    this.i || endOfChunks.done(this, this.posted.join("&"));
  } else {
    endOfChunks.done(this, this.join(""));
  }
}

endOfChunks.done = function (chunks, posted) {
  var
    callback = chunks.callback,
    polpetta = chunks.polpetta,
    received = chunks.received
  ;
  delete chunks.polpetta;
  delete chunks.callback;
  delete chunks.received;
  delete chunks.posted;
  chunks.length = 0;
  defineGPF(polpetta, "post", querystring.parse(
    posted
  ));
  received && defineGPF(polpetta, "file", received);
  callback();
};

endOfChunks.writeFile = function (file, err) {
  if (err) {
    file.error = err;
  } else {
    file.size = fs.statSync(file.tmp_name).size;
  }
  --this.i || endOfChunks.done(this, this.posted.join("&"));
};

endOfChunks.forEach = function (data, i) {
  var
    line = data.split("\r\n"),
    headers = line.slice(
      1, line.indexOf("", 1)
    ),
    name,
    filename,
    file,
    parse,
    content
  ;
  i = 0;
  while (i < headers.length) {
    parse = headers[i++];
    if (endOfChunks.testName.test(parse)) {
      name = RegExp.$2;
      content = line.slice(
        line.indexOf("", i) + 1, line.length - 1
      ).join("\r\n");
      if (endOfChunks.testFileName.test(parse)) {
        filename = RegExp.$2;
        if (filename.length) {
          file = {
            name: filename,
            type: polpetta_type(
              path.extname(filename),
              "application/octet-stream"
            ),
            error: null,
            size: 0
          };
          if (has(this.received, name)) {
            if (this.received[name] instanceof Array) {
              this.received[name].push(file);
            } else {
              this.received[name] = [this.received[name], file];
            }
          } else {
            this.received[name] = file;
          }
          this.i++;
          fs.writeFile(
            file.tmp_name = path.join(
              TMP, name + Math.random() + filename
            ),
            content,
            "binary",
            endOfChunks.writeFile.bind(
              this,
              file
            )
          );
        }
      } else if (content.length) {
        this.posted.push(
          encodeURIComponent(name) +
          "=" +
          encodeURIComponent(content)
        );
      }
      break;
    }
  }
};

endOfChunks.testFileName = /filename=("|')?([^\1]*?)\1/;
endOfChunks.testName = /name=("|')?([^\1]*?)\1/;

// onrequest should be intercepted even before the filestat check
// however, get, post, cookie, and file should be available already
function fileStat(err, stats) {
  var
    notAnError = !err,
    isDir = notAnError && stats.isDirectory(),
    isFile = notAnError && stats.isFile(),
    ext,
    tmp
  ;
  switch(true) {
    case isFile:
      ext = assignExt.call(this);
      if (ext == ".njs") {
        requireNJS.call(this);
      } else if (STREAM_FILES_BIGGER_THAN < stats.size) {
        streamFile.call(this, stats);
      } else {
        fs.readFile(
          this.path,
          polpetta_encoding(ext),
          readFile.bind(this)
        );
      }
      break;
    case isDir:
      tmp = getCurrentPathName(this);
      if (tmp.slice(WEB_SEP_NEGATIVE_LENGTH) != WEB_SEP) {
        return polpetta_redirect.call(this, tmp + WEB_SEP);
      }
      tmp = findHome(this.path + SEP);
      if (1 < (tmp.length - this.path.length)) {
        this.path = tmp;
        ext = assignExt.call(this);
        if (ext == ".njs") {
          requireNJS.call(this);
        } else {
          fs.stat(
            tmp,
            fileStat.bind(this)
          );
        }
      } else if (LIST_FILES_AND_FOLDERS) {
        fs.readdir(
          this.path,
          readDir.bind(this)
        );
      } else {
        forbidden.call(this, stats);
      }
      break;
    default:
      notFound.call(this, stats);
      break;
  }
}
// search for a valid page to serve
// when the path is not specified
function findHome(p) {
  return p + (findHome.lookFor.filter(
    findHome.filter,
    p
  )[0] || "");
}
findHome.lookFor = [
  "index.njs",
  "index.html",
  "index.htm"
];
findHome.filter = function (main) {
  return this.found || (
    this.found = fs.existsSync(this + main)
  );
};

function findPort(args) {
  return (/^(\d+)$/.test(args[1]) ||
          /^(\d+)$/.test(args[0])) &&
          RegExp.$1;
}
// when stuff is done, flush the output
// this.output.push("What", "Ever");
// this.output.flush(200, "html");
function flushResponse(
  code,
  type,
  encode
) {
  var
    response = this.response,
    cookies = this.cookie._,
    output = this.output,
    length = output.length
  ;
  // output.flush("html");
  // output.flush(".html");
  // output.flush("text/html");
  // => 200, text/html
  if (
    type == null &&
    typeof code == "string"
  ) {
    type = code;
    code = 200;
  }
  // output.flush(); => 200, text/html
  if (!code) {
    code = length ? 200 : 404;
  }
  if (typeof type == "string") {
    response.writeHead(
      code,
      polpetta_header(
        type || "text/html"
      )
    );
  } else {
    type || (type = polpetta_header(
      "text/html"
    ));
    if (cookies.length) {
      type["Set-Cookie"] = cookies.join(", ");
    }
    response.writeHead(
      code,
      type
    );
  }
  // 304, 404, Not Found ... etc etc ...
  response.end(
    length ?
      output.join("") :
      polpetta_code(code),
    encode || "utf-8"
  );
}
function fsStat() {
  fs.stat(
    this.path,
    fileStat.bind(this)
  );
}
function getCurrentPathName(polpetta) {
  var
    dirName = polpetta.url.pathname,
    request_url = polpetta.request.url
  ;
  // dirName should be at the root, right?
  // so if indexOf is 0 then is not
  return request_url.indexOf(dirName) ?
    url.parse(request_url, true).pathname : dirName
  ;
}

function getOrDefine(object, key, callback) {
  return has(object, key) ?
    object[key] : object[key] = callback(key)
  ;
}

// simply returns the key if present
function getValue(key, def) {
  return has(this, key) ?
    this[key] : def
  ;
}
var has = function (hasOwnProperty) {
  return function has(object, key) {
    return hasOwnProperty.call(object, key);
  };
}({}.hasOwnProperty);
// if you do something wrong ...
// or you simply need help
function help() {
  console.log([
    "=======================================================",
    "      (က) Polpetta, any folder is served spiced",
    "=======================================================",
    "node polpetta [path] [port]",
    "node polpetta        server runs in polpetta folder",
    "node polpetta ~/     server runs in specific ~/ folder",
    "./polpetta           same as above.. you need a folder!",
    "./polpetta ./ 8080   runs in polpetta dir with 8080 port",
    "-------------------------------------------------------",
    "The output will describe the folder",
    "and the full URL to use with your browser",
    "_______________________________________________________"
  ].join("\n"));
}

// parses cookies
function parseCookie(cookie) {
  var parts = cookie.split('=');
  this[unescape(parts[0])] = unescape(parts[1] || '');
}
// used to show a directory content
function readDir(err, files) {
  if (err) {
    internalServerError.call(this, err);
  } else {
    var dirName = decodeURIComponent(
      getCurrentPathName(this)
    );
    this.output.push(
      "<!doctype html>",
      "<html>",
        "<head>",
          "<title>Index of ", dirName, "</title>",
          '<meta name="viewport" content="',
            'width=device-width,',
            'initial-scale=1.0,',
            'maximum-scale=1.0,',
            'user-scalable=no',
          '"/>',
          '<meta name="generator" content="polpetta" />',
        "</head>",
        "<body>",
          "<strong>Index of " + dirName + "</strong>",
          "<ul>"
    );
    if (dirName != WEB_SEP) {
      this.output.push(
        '<li><a href="..">..</a></li>'
      );
    }
    files.forEach(readDir.forEach, this.output);
    this.output.push(
          "</ul>",
        "</body>",
      "</html>"
    );
    this.output.flush(200, "text/html", "utf-8");
  }
}

readDir.forEach = function (name) {
  if (!HIDDEN_FILE.test(name)) {
    this.push(
      '<li><a href="' + name + '">' + name + '</a></li>'
    );
  }
};

// once the file has been read ...
function readFile(
  err,
  data
) {
  if (err) {
    internalServerError.call(this, err);
  } else if (!invokedHtaccess.call(
    this,
    200,
    "onstaticfile",
    data
  )) {
    this.response.writeHead(
      200, this.header(this.ext)
    );
    this.response.end(
      data, polpetta_encoding(this.ext)
    );
  }
}

// used to require .njs files
function requireNJS() {
  try {
    // not my fault if require is synchronous ...
    var module = require(this.path);
  } catch(o_O) {
    console.error(o_O);
    return internalServerError.call(this, o_O);
  }
  module.onload(
    this.request,
    this.response,
    this
  );
}

// handy function to have only real arguments
// works with env directive or through node ~/program.js
function resolveArguments(args, keepProgramName) {
  // do not modify original argument
  var a = [].slice.call(args, 0);
  // remove first argument if it's node
  if (/(?:^|\/|\\)node(?:\.exe)?$/.test(a[0])) a.shift();
  // remove program itself
  keepProgramName || a.shift();
  return a;
}
// function used to perform very first connection
function serverListen() {
  server.listen(port, HOST_NAME, serverListen.connect);
}

serverListen.connected = false;

serverListen.connect = function () {
  if (!serverListen.connected) {
    serverListen.connected = true;
    var address = server.address();
    console.log("http:" + WEB_SEP + WEB_SEP + address.address + ":" + address.port + WEB_SEP);
    console.log([
      "#",
      "(က)",
      "polpetta",
      "v" + version,
      root
    ].join(" "));
  }
};

serverListen.error = function () {
  if (HOST_USER_PORT) {
    console.log([
      "=======================================================",
      "Unable to use specified port: ",
      port,
      "-------------------------------------------------------",
      "Try to kill previous process or",
      "try again without the port to find one available",
      "======================================================="
    ].join("\n"));
  } else {
    serverListen(++port);
  }
};

function setCookie(name, value, exp, path, domain, secure) {
		var c = [];
		c.push(escape(name) + '=' + escape(value));
		if(exp > 0) {
			c.push(
			  "expires=" + new Date(
			    new Date + (exp * 86400000)
			  ).toGMTString()
			);
		}
  	path && c.push("path=" + path);
  	domain && c.push("domain=" + domain);
  	secure && c.push("secure");
		this.push(c.join(';'));
}

// once the file has been read ...
function streamFile(stats) {
  if (!invokedHtaccess.call(
    this,
    200,
    "onstreamfile",
    stats
  )) {
    var stream = fs.createReadStream(this.path, emptyObjet);
    commonStream["Content-Type"] = polpetta_type(this.ext);
    commonStream["Content-Length"] = stats.size;
    this.response.writeHead(200, commonStream);
    stream.on("error", internalServerError.bind(this));
    stream.pipe(this.response);
  }
}

function withKeysMethod(callback, obj) {
  return defineKnownProperty(
    callback.bind(obj),
    "keys",
    keys.bind(null, obj)
  );
}
function defineEachProperty(key) {
  defineProperty(this, key, commonDescriptor);
}

function defineGetter(get) {
  return {
    enumerable: true,
    get: get
  };
}
function defineKnownGetter(property, value) {
  return {
    enumerable: true,
    get: function () {
      return defineKnownProperty(
        this,
        property,
        value
      )[property];
    }
  };
}
function defineKnownProperty(self, key, value) {
  commonDescriptor.value = value;
  return defineProperty(self, key, commonDescriptor);
}
function defineNotConfigurableProperty(self, key, value) {
  commonDescriptor.writable = true;
  commonDescriptor.value = value;
  defineProperty(self, key, commonDescriptor);
  commonDescriptor.writable = false;
  return self;
}
function defineNotEnumerableProperty(self, key, value) {
  commonDescriptor.enumerable = false;
  commonDescriptor.value = value;
  defineProperty(self, key, commonDescriptor);
  commonDescriptor.enumerable = true;
  return self;
}
// reused function for all Not Founds
var forbidden = generateErrorResponses(
  403
);
// returns common function to call
// when shit happens
function generateErrorResponses(code) {
  return function(data) {
    if (!invokedHtaccess.call(
      this,
      code,
      "onerror",
      data
    )) {
      commonResponses["Status-Code"] = code;
      commonResponses.Status = this.code(code);
      this.response.writeHead(
        code, commonResponses
      );
      this.response.end();
    }
  }
}

// reused function for all Internal Server Errors
var internalServerError = generateErrorResponses(
  500
);
// reused function for all Not Founds
var notFound = generateErrorResponses(
  404
);
function polpetta_code(code) {
  return  http.STATUS_CODES[code] ||
          "Internal Server Error";
}

function polpetta_encoding(ext) {
  return getOrDefine(
    polpetta_encoding_cache,
    ext,
    polpetta_encoding_define
  );
}

function polpetta_encoding_define(ext) {
  return polpetta_type(ext).indexOf("text/") ?
    "binary" : "utf-8"
  ;
}

var polpetta_encoding_cache = {};
function polpetta_header(type) {
  return {
    "Content-Type": getOrDefine(
      polpetta_header_cache,
      type,
      polpetta_header_define
    )
  };
}

function polpetta_header_define(type) {
  ~type.indexOf("/") || (
    type = polpetta_type(type)
  );
  type.indexOf("text/") || (
    type += ";charset=utf-8"
  );
  return type;
}

var polpetta_header_cache = {};
function polpetta_redirect(href, internally) {
  if (internally) {
    has(this, "url") ||
    defineKnownProperty(this, "url", url.parse(href, true));
  } else {
    redirect.Location = href;
    this.response.writeHead(
      301, redirect
    );
    this.response.end();
    return false;
  }
}
// see polpetta_resolve
function polpetta_resolve(src) {
  src = path.resolve(
		root + systemPath(src)
	);
	// root must be at index 0
  return src.indexOf(root) ? "" : src;
}
function polpetta_root(args) {
  // nothing has been specified or ...
  return (
    !args.length || (
      // only the port has been specified
      args.length == 1 && HOST_USER_PORT
    ) ?
      CWD : path.resolve(CWD, args[0])
  ) + SEP;
}

function polpetta_type(type, def) {
  return EXTENSION_TO_MIME[(
    type[0] == "." ?
      type :
      "." + type
  ).toLowerCase()] || def || "text/html";
}

// local variables
var
  // version
  version = "0.3.3",

  // dependencies
  fs = require("fs"),
  http = require("http"),
  querystring = require("querystring"),
  stream = require("stream"),
  url = require("url"),
  path = require("path"),
  env = process.env,

  // from globals
  keys = Object.keys,
  freeze = Object.freeze,
  defineProperty = Object.defineProperty,

  stats = freeze(new fs.Stats),

  // internal objects
  redirect = {
    Location: null
  },
  commonDescriptor = {
    enumerable: true,
    writable: false,
    configurable: false,
    value: null
  },
  commonResponses = {
    Connection: "close",
    Status: "",
    "Status-Code": 0
  },
  commonStream = {
    "Content-Type": "",
    "Content-Length": 0
  },
  emptyObjet = {},
  event = defineNotConfigurableProperty(
    defineKnownProperty(
      {}, "preventDefault", function () {
        event.defaultPrevented = true;
      }
    ),
    "defaultPrevented",
    false
  ),
  arguments = resolveArguments(process.argv),

  // internal constants
  CWD = process.cwd(),
  HOST_USER_PORT = findPort(arguments),
  SEP = path.sep,
  WEB_SEP = "/",
  WEB_SEP_NEGATIVE_LENGTH = -WEB_SEP.length,
  TMP = env.TMP || env.TMPDIR || env.TEMP || CWD,
  port =  HOST_USER_PORT ||
          HOST_INITIAL_PORT,
  root = polpetta_root(arguments),

  // RegExp constants
  BOUNDARY_MATCH = /boundary=([^;]+)/,
  PATH_SLASHES = /(\\|\/)/g,
  HIDDEN_FILE = /(?:^|\/)\.[^/]*|(?:^|\/)node_modules\/?$/,

  // placeholder for post and file property
  emptyGetter = withKeysMethod(
    getValue,
    {}
  ),

  // common/reused variables
  server,
  systemPath, webPath,
  htaccess,
  htaccessPath,
  postedData
;

if (SEP == WEB_SEP) {
  systemPath = webPath = function (path) {
    return path;
  };
} else {
  systemPath = createPathReplacer(WEB_SEP, SEP);
  webPath = createPathReplacer(SEP, WEB_SEP);
}

const EXTENSION_TO_MIME = freeze({
  ".ez":"application/andrew-inset",
  ".aw":"application/applixware",
  ".atom":"application/atom+xml",
  ".atomcat":"application/atomcat+xml",
  ".atomsvc":"application/atomsvc+xml",
  ".ccxml":"application/ccxml+xml",
  ".cdmia":"application/cdmi-capability",
  ".cdmic":"application/cdmi-container",
  ".cdmid":"application/cdmi-domain",
  ".cdmio":"application/cdmi-object",
  ".cdmiq":"application/cdmi-queue",
  ".cu":"application/cu-seeme",
  ".davmount":"application/davmount+xml",
  ".dbk":"application/docbook+xml",
  ".dssc":"application/dssc+der",
  ".xdssc":"application/dssc+xml",
  ".ecma":"application/ecmascript",
  ".emma":"application/emma+xml",
  ".epub":"application/epub+zip",
  ".exi":"application/exi",
  ".pfr":"application/font-tdpfr",
  ".gml":"application/gml+xml",
  ".gpx":"application/gpx+xml",
  ".gxf":"application/gxf",
  ".stk":"application/hyperstudio",
  ".ink":"application/inkml+xml",
  ".inkml":"application/inkml+xml",
  ".ipfix":"application/ipfix",
  ".jar":"application/java-archive",
  ".ser":"application/java-serialized-object",
  ".class":"application/java-vm",
  ".js":"application/javascript",
  ".json":"application/json",
  ".jsonml":"application/jsonml+json",
  ".lostxml":"application/lost+xml",
  ".hqx":"application/mac-binhex40",
  ".cpt":"application/mac-compactpro",
  ".mads":"application/mads+xml",
  ".mrc":"application/marc",
  ".mrcx":"application/marcxml+xml",
  ".ma":"application/mathematica",
  ".nb":"application/mathematica",
  ".mb":"application/mathematica",
  ".mathml":"application/mathml+xml",
  ".mbox":"application/mbox",
  ".mscml":"application/mediaservercontrol+xml",
  ".metalink":"application/metalink+xml",
  ".meta4":"application/metalink4+xml",
  ".mets":"application/mets+xml",
  ".mods":"application/mods+xml",
  ".m21":"application/mp21",
  ".mp21":"application/mp21",
  ".mp4s":"application/mp4",
  ".doc":"application/msword",
  ".dot":"application/msword",
  ".mxf":"application/mxf",
  ".bin":"application/octet-stream",
  ".dms":"application/octet-stream",
  ".lrf":"application/octet-stream",
  ".mar":"application/octet-stream",
  ".so":"application/octet-stream",
  ".dist":"application/octet-stream",
  ".distz":"application/octet-stream",
  ".pkg":"application/octet-stream",
  ".bpk":"application/octet-stream",
  ".dump":"application/octet-stream",
  ".elc":"application/octet-stream",
  ".deploy":"application/octet-stream",
  ".oda":"application/oda",
  ".opf":"application/oebps-package+xml",
  ".ogx":"application/ogg",
  ".omdoc":"application/omdoc+xml",
  ".onetoc":"application/onenote",
  ".onetoc2":"application/onenote",
  ".onetmp":"application/onenote",
  ".onepkg":"application/onenote",
  ".oxps":"application/oxps",
  ".xer":"application/patch-ops-error+xml",
  ".pdf":"application/pdf",
  ".pgp":"application/pgp-encrypted",
  ".asc":"application/pgp-signature",
  ".sig":"application/pgp-signature",
  ".prf":"application/pics-rules",
  ".p10":"application/pkcs10",
  ".p7m":"application/pkcs7-mime",
  ".p7c":"application/pkcs7-mime",
  ".p7s":"application/pkcs7-signature",
  ".p8":"application/pkcs8",
  ".ac":"application/pkix-attr-cert",
  ".cer":"application/pkix-cert",
  ".crl":"application/pkix-crl",
  ".pkipath":"application/pkix-pkipath",
  ".pki":"application/pkixcmp",
  ".pls":"application/pls+xml",
  ".ai":"application/postscript",
  ".eps":"application/postscript",
  ".ps":"application/postscript",
  ".cww":"application/prs.cww",
  ".pskcxml":"application/pskc+xml",
  ".rdf":"application/rdf+xml",
  ".rif":"application/reginfo+xml",
  ".rnc":"application/relax-ng-compact-syntax",
  ".rl":"application/resource-lists+xml",
  ".rld":"application/resource-lists-diff+xml",
  ".rs":"application/rls-services+xml",
  ".gbr":"application/rpki-ghostbusters",
  ".mft":"application/rpki-manifest",
  ".roa":"application/rpki-roa",
  ".rsd":"application/rsd+xml",
  ".rss":"application/rss+xml",
  ".rtf":"application/rtf",
  ".sbml":"application/sbml+xml",
  ".scq":"application/scvp-cv-request",
  ".scs":"application/scvp-cv-response",
  ".spq":"application/scvp-vp-request",
  ".spp":"application/scvp-vp-response",
  ".sdp":"application/sdp",
  ".setpay":"application/set-payment-initiation",
  ".setreg":"application/set-registration-initiation",
  ".shf":"application/shf+xml",
  ".smi":"application/smil+xml",
  ".smil":"application/smil+xml",
  ".rq":"application/sparql-query",
  ".srx":"application/sparql-results+xml",
  ".gram":"application/srgs",
  ".grxml":"application/srgs+xml",
  ".sru":"application/sru+xml",
  ".ssdl":"application/ssdl+xml",
  ".ssml":"application/ssml+xml",
  ".tei":"application/tei+xml",
  ".teicorpus":"application/tei+xml",
  ".tfi":"application/thraud+xml",
  ".tsd":"application/timestamped-data",
  ".plb":"application/vnd.3gpp.pic-bw-large",
  ".psb":"application/vnd.3gpp.pic-bw-small",
  ".pvb":"application/vnd.3gpp.pic-bw-var",
  ".tcap":"application/vnd.3gpp2.tcap",
  ".pwn":"application/vnd.3m.post-it-notes",
  ".aso":"application/vnd.accpac.simply.aso",
  ".imp":"application/vnd.accpac.simply.imp",
  ".acu":"application/vnd.acucobol",
  ".atc":"application/vnd.acucorp",
  ".acutc":"application/vnd.acucorp",
  ".air":"application/vnd.adobe.air-application-installer-package+zip",
  ".fcdt":"application/vnd.adobe.formscentral.fcdt",
  ".fxp":"application/vnd.adobe.fxp",
  ".fxpl":"application/vnd.adobe.fxp",
  ".xdp":"application/vnd.adobe.xdp+xml",
  ".xfdf":"application/vnd.adobe.xfdf",
  ".ahead":"application/vnd.ahead.space",
  ".azf":"application/vnd.airzip.filesecure.azf",
  ".azs":"application/vnd.airzip.filesecure.azs",
  ".azw":"application/vnd.amazon.ebook",
  ".acc":"application/vnd.americandynamics.acc",
  ".ami":"application/vnd.amiga.ami",
  ".apk":"application/vnd.android.package-archive",
  ".cii":"application/vnd.anser-web-certificate-issue-initiation",
  ".fti":"application/vnd.anser-web-funds-transfer-initiation",
  ".atx":"application/vnd.antix.game-component",
  ".mpkg":"application/vnd.apple.installer+xml",
  ".m3u8":"application/vnd.apple.mpegurl",
  ".swi":"application/vnd.aristanetworks.swi",
  ".iota":"application/vnd.astraea-software.iota",
  ".aep":"application/vnd.audiograph",
  ".mpm":"application/vnd.blueice.multipass",
  ".bmi":"application/vnd.bmi",
  ".rep":"application/vnd.businessobjects",
  ".cdxml":"application/vnd.chemdraw+xml",
  ".mmd":"application/vnd.chipnuts.karaoke-mmd",
  ".cdy":"application/vnd.cinderella",
  ".cla":"application/vnd.claymore",
  ".rp9":"application/vnd.cloanto.rp9",
  ".c4g":"application/vnd.clonk.c4group",
  ".c4d":"application/vnd.clonk.c4group",
  ".c4f":"application/vnd.clonk.c4group",
  ".c4p":"application/vnd.clonk.c4group",
  ".c4u":"application/vnd.clonk.c4group",
  ".c11amc":"application/vnd.cluetrust.cartomobile-config",
  ".c11amz":"application/vnd.cluetrust.cartomobile-config-pkg",
  ".csp":"application/vnd.commonspace",
  ".cdbcmsg":"application/vnd.contact.cmsg",
  ".cmc":"application/vnd.cosmocaller",
  ".clkx":"application/vnd.crick.clicker",
  ".clkk":"application/vnd.crick.clicker.keyboard",
  ".clkp":"application/vnd.crick.clicker.palette",
  ".clkt":"application/vnd.crick.clicker.template",
  ".clkw":"application/vnd.crick.clicker.wordbank",
  ".wbs":"application/vnd.criticaltools.wbs+xml",
  ".pml":"application/vnd.ctc-posml",
  ".ppd":"application/vnd.cups-ppd",
  ".car":"application/vnd.curl.car",
  ".pcurl":"application/vnd.curl.pcurl",
  ".dart":"application/vnd.dart",
  ".rdz":"application/vnd.data-vision.rdz",
  ".uvf":"application/vnd.dece.data",
  ".uvvf":"application/vnd.dece.data",
  ".uvd":"application/vnd.dece.data",
  ".uvvd":"application/vnd.dece.data",
  ".uvt":"application/vnd.dece.ttml+xml",
  ".uvvt":"application/vnd.dece.ttml+xml",
  ".uvx":"application/vnd.dece.unspecified",
  ".uvvx":"application/vnd.dece.unspecified",
  ".uvz":"application/vnd.dece.zip",
  ".uvvz":"application/vnd.dece.zip",
  ".fe_launch":"application/vnd.denovo.fcselayout-link",
  ".dna":"application/vnd.dna",
  ".mlp":"application/vnd.dolby.mlp",
  ".dpg":"application/vnd.dpgraph",
  ".dfac":"application/vnd.dreamfactory",
  ".kpxx":"application/vnd.ds-keypoint",
  ".ait":"application/vnd.dvb.ait",
  ".svc":"application/vnd.dvb.service",
  ".geo":"application/vnd.dynageo",
  ".mag":"application/vnd.ecowin.chart",
  ".nml":"application/vnd.enliven",
  ".esf":"application/vnd.epson.esf",
  ".msf":"application/vnd.epson.msf",
  ".qam":"application/vnd.epson.quickanime",
  ".slt":"application/vnd.epson.salt",
  ".ssf":"application/vnd.epson.ssf",
  ".es3":"application/vnd.eszigno3+xml",
  ".et3":"application/vnd.eszigno3+xml",
  ".ez2":"application/vnd.ezpix-album",
  ".ez3":"application/vnd.ezpix-package",
  ".fdf":"application/vnd.fdf",
  ".mseed":"application/vnd.fdsn.mseed",
  ".seed":"application/vnd.fdsn.seed",
  ".dataless":"application/vnd.fdsn.seed",
  ".gph":"application/vnd.flographit",
  ".ftc":"application/vnd.fluxtime.clip",
  ".fm":"application/vnd.framemaker",
  ".frame":"application/vnd.framemaker",
  ".maker":"application/vnd.framemaker",
  ".book":"application/vnd.framemaker",
  ".fnc":"application/vnd.frogans.fnc",
  ".ltf":"application/vnd.frogans.ltf",
  ".fsc":"application/vnd.fsc.weblaunch",
  ".oas":"application/vnd.fujitsu.oasys",
  ".oa2":"application/vnd.fujitsu.oasys2",
  ".oa3":"application/vnd.fujitsu.oasys3",
  ".fg5":"application/vnd.fujitsu.oasysgp",
  ".bh2":"application/vnd.fujitsu.oasysprs",
  ".ddd":"application/vnd.fujixerox.ddd",
  ".xdw":"application/vnd.fujixerox.docuworks",
  ".xbd":"application/vnd.fujixerox.docuworks.binder",
  ".fzs":"application/vnd.fuzzysheet",
  ".txd":"application/vnd.genomatix.tuxedo",
  ".ggb":"application/vnd.geogebra.file",
  ".ggt":"application/vnd.geogebra.tool",
  ".gex":"application/vnd.geometry-explorer",
  ".gre":"application/vnd.geometry-explorer",
  ".gxt":"application/vnd.geonext",
  ".g2w":"application/vnd.geoplan",
  ".g3w":"application/vnd.geospace",
  ".gmx":"application/vnd.gmx",
  ".kml":"application/vnd.google-earth.kml+xml",
  ".kmz":"application/vnd.google-earth.kmz",
  ".gqf":"application/vnd.grafeq",
  ".gqs":"application/vnd.grafeq",
  ".gac":"application/vnd.groove-account",
  ".ghf":"application/vnd.groove-help",
  ".gim":"application/vnd.groove-identity-message",
  ".grv":"application/vnd.groove-injector",
  ".gtm":"application/vnd.groove-tool-message",
  ".tpl":"application/vnd.groove-tool-template",
  ".vcg":"application/vnd.groove-vcard",
  ".hal":"application/vnd.hal+xml",
  ".zmm":"application/vnd.handheld-entertainment+xml",
  ".hbci":"application/vnd.hbci",
  ".les":"application/vnd.hhe.lesson-player",
  ".hpgl":"application/vnd.hp-hpgl",
  ".hpid":"application/vnd.hp-hpid",
  ".hps":"application/vnd.hp-hps",
  ".jlt":"application/vnd.hp-jlyt",
  ".pcl":"application/vnd.hp-pcl",
  ".pclxl":"application/vnd.hp-pclxl",
  ".sfd-hdstx":"application/vnd.hydrostatix.sof-data",
  ".mpy":"application/vnd.ibm.minipay",
  ".afp":"application/vnd.ibm.modcap",
  ".listafp":"application/vnd.ibm.modcap",
  ".list3820":"application/vnd.ibm.modcap",
  ".irm":"application/vnd.ibm.rights-management",
  ".sc":"application/vnd.ibm.secure-container",
  ".icc":"application/vnd.iccprofile",
  ".icm":"application/vnd.iccprofile",
  ".igl":"application/vnd.igloader",
  ".ivp":"application/vnd.immervision-ivp",
  ".ivu":"application/vnd.immervision-ivu",
  ".igm":"application/vnd.insors.igm",
  ".xpw":"application/vnd.intercon.formnet",
  ".xpx":"application/vnd.intercon.formnet",
  ".i2g":"application/vnd.intergeo",
  ".qbo":"application/vnd.intu.qbo",
  ".qfx":"application/vnd.intu.qfx",
  ".rcprofile":"application/vnd.ipunplugged.rcprofile",
  ".irp":"application/vnd.irepository.package+xml",
  ".xpr":"application/vnd.is-xpr",
  ".fcs":"application/vnd.isac.fcs",
  ".jam":"application/vnd.jam",
  ".rms":"application/vnd.jcp.javame.midlet-rms",
  ".jisp":"application/vnd.jisp",
  ".joda":"application/vnd.joost.joda-archive",
  ".ktz":"application/vnd.kahootz",
  ".ktr":"application/vnd.kahootz",
  ".karbon":"application/vnd.kde.karbon",
  ".chrt":"application/vnd.kde.kchart",
  ".kfo":"application/vnd.kde.kformula",
  ".flw":"application/vnd.kde.kivio",
  ".kon":"application/vnd.kde.kontour",
  ".kpr":"application/vnd.kde.kpresenter",
  ".kpt":"application/vnd.kde.kpresenter",
  ".ksp":"application/vnd.kde.kspread",
  ".kwd":"application/vnd.kde.kword",
  ".kwt":"application/vnd.kde.kword",
  ".htke":"application/vnd.kenameaapp",
  ".kia":"application/vnd.kidspiration",
  ".kne":"application/vnd.kinar",
  ".knp":"application/vnd.kinar",
  ".skp":"application/vnd.koan",
  ".skd":"application/vnd.koan",
  ".skt":"application/vnd.koan",
  ".skm":"application/vnd.koan",
  ".sse":"application/vnd.kodak-descriptor",
  ".lasxml":"application/vnd.las.las+xml",
  ".lbd":"application/vnd.llamagraphics.life-balance.desktop",
  ".lbe":"application/vnd.llamagraphics.life-balance.exchange+xml",
  ".123":"application/vnd.lotus-1-2-3",
  ".apr":"application/vnd.lotus-approach",
  ".pre":"application/vnd.lotus-freelance",
  ".nsf":"application/vnd.lotus-notes",
  ".org":"application/vnd.lotus-organizer",
  ".scm":"application/vnd.lotus-screencam",
  ".lwp":"application/vnd.lotus-wordpro",
  ".portpkg":"application/vnd.macports.portpkg",
  ".mcd":"application/vnd.mcd",
  ".mc1":"application/vnd.medcalcdata",
  ".cdkey":"application/vnd.mediastation.cdkey",
  ".mwf":"application/vnd.mfer",
  ".mfm":"application/vnd.mfmp",
  ".flo":"application/vnd.micrografx.flo",
  ".igx":"application/vnd.micrografx.igx",
  ".mif":"application/vnd.mif",
  ".daf":"application/vnd.mobius.daf",
  ".dis":"application/vnd.mobius.dis",
  ".mbk":"application/vnd.mobius.mbk",
  ".mqy":"application/vnd.mobius.mqy",
  ".msl":"application/vnd.mobius.msl",
  ".plc":"application/vnd.mobius.plc",
  ".txf":"application/vnd.mobius.txf",
  ".mpn":"application/vnd.mophun.application",
  ".mpc":"application/vnd.mophun.certificate",
  ".xul":"application/vnd.mozilla.xul+xml",
  ".cil":"application/vnd.ms-artgalry",
  ".cab":"application/vnd.ms-cab-compressed",
  ".xls":"application/vnd.ms-excel",
  ".xlm":"application/vnd.ms-excel",
  ".xla":"application/vnd.ms-excel",
  ".xlc":"application/vnd.ms-excel",
  ".xlt":"application/vnd.ms-excel",
  ".xlw":"application/vnd.ms-excel",
  ".xlam":"application/vnd.ms-excel.addin.macroenabled.12",
  ".xlsb":"application/vnd.ms-excel.sheet.binary.macroenabled.12",
  ".xlsm":"application/vnd.ms-excel.sheet.macroenabled.12",
  ".xltm":"application/vnd.ms-excel.template.macroenabled.12",
  ".eot":"application/vnd.ms-fontobject",
  ".chm":"application/vnd.ms-htmlhelp",
  ".ims":"application/vnd.ms-ims",
  ".lrm":"application/vnd.ms-lrm",
  ".thmx":"application/vnd.ms-officetheme",
  ".cat":"application/vnd.ms-pki.seccat",
  ".stl":"application/vnd.ms-pki.stl",
  ".ppt":"application/vnd.ms-powerpoint",
  ".pps":"application/vnd.ms-powerpoint",
  ".pot":"application/vnd.ms-powerpoint",
  ".ppam":"application/vnd.ms-powerpoint.addin.macroenabled.12",
  ".pptm":"application/vnd.ms-powerpoint.presentation.macroenabled.12",
  ".sldm":"application/vnd.ms-powerpoint.slide.macroenabled.12",
  ".ppsm":"application/vnd.ms-powerpoint.slideshow.macroenabled.12",
  ".potm":"application/vnd.ms-powerpoint.template.macroenabled.12",
  ".mpp":"application/vnd.ms-project",
  ".mpt":"application/vnd.ms-project",
  ".docm":"application/vnd.ms-word.document.macroenabled.12",
  ".dotm":"application/vnd.ms-word.template.macroenabled.12",
  ".wps":"application/vnd.ms-works",
  ".wks":"application/vnd.ms-works",
  ".wcm":"application/vnd.ms-works",
  ".wdb":"application/vnd.ms-works",
  ".wpl":"application/vnd.ms-wpl",
  ".xps":"application/vnd.ms-xpsdocument",
  ".mseq":"application/vnd.mseq",
  ".mus":"application/vnd.musician",
  ".msty":"application/vnd.muvee.style",
  ".taglet":"application/vnd.mynfc",
  ".nlu":"application/vnd.neurolanguage.nlu",
  ".ntf":"application/vnd.nitf",
  ".nitf":"application/vnd.nitf",
  ".nnd":"application/vnd.noblenet-directory",
  ".nns":"application/vnd.noblenet-sealer",
  ".nnw":"application/vnd.noblenet-web",
  ".ngdat":"application/vnd.nokia.n-gage.data",
  ".n-gage":"application/vnd.nokia.n-gage.symbian.install",
  ".rpst":"application/vnd.nokia.radio-preset",
  ".rpss":"application/vnd.nokia.radio-presets",
  ".edm":"application/vnd.novadigm.edm",
  ".edx":"application/vnd.novadigm.edx",
  ".ext":"application/vnd.novadigm.ext",
  ".odc":"application/vnd.oasis.opendocument.chart",
  ".otc":"application/vnd.oasis.opendocument.chart-template",
  ".odb":"application/vnd.oasis.opendocument.database",
  ".odf":"application/vnd.oasis.opendocument.formula",
  ".odft":"application/vnd.oasis.opendocument.formula-template",
  ".odg":"application/vnd.oasis.opendocument.graphics",
  ".otg":"application/vnd.oasis.opendocument.graphics-template",
  ".odi":"application/vnd.oasis.opendocument.image",
  ".oti":"application/vnd.oasis.opendocument.image-template",
  ".odp":"application/vnd.oasis.opendocument.presentation",
  ".otp":"application/vnd.oasis.opendocument.presentation-template",
  ".ods":"application/vnd.oasis.opendocument.spreadsheet",
  ".ots":"application/vnd.oasis.opendocument.spreadsheet-template",
  ".odt":"application/vnd.oasis.opendocument.text",
  ".odm":"application/vnd.oasis.opendocument.text-master",
  ".ott":"application/vnd.oasis.opendocument.text-template",
  ".oth":"application/vnd.oasis.opendocument.text-web",
  ".xo":"application/vnd.olpc-sugar",
  ".dd2":"application/vnd.oma.dd2+xml",
  ".oxt":"application/vnd.openofficeorg.extension",
  ".pptx":"application/vnd.openxmlformats-officedocument.presentationml.presentation",
  ".sldx":"application/vnd.openxmlformats-officedocument.presentationml.slide",
  ".ppsx":"application/vnd.openxmlformats-officedocument.presentationml.slideshow",
  ".potx":"application/vnd.openxmlformats-officedocument.presentationml.template",
  ".xlsx":"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
  ".xltx":"application/vnd.openxmlformats-officedocument.spreadsheetml.template",
  ".docx":"application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  ".dotx":"application/vnd.openxmlformats-officedocument.wordprocessingml.template",
  ".mgp":"application/vnd.osgeo.mapguide.package",
  ".dp":"application/vnd.osgi.dp",
  ".esa":"application/vnd.osgi.subsystem",
  ".pdb":"application/vnd.palm",
  ".pqa":"application/vnd.palm",
  ".oprc":"application/vnd.palm",
  ".paw":"application/vnd.pawaafile",
  ".str":"application/vnd.pg.format",
  ".ei6":"application/vnd.pg.osasli",
  ".efif":"application/vnd.picsel",
  ".wg":"application/vnd.pmi.widget",
  ".plf":"application/vnd.pocketlearn",
  ".pbd":"application/vnd.powerbuilder6",
  ".box":"application/vnd.previewsystems.box",
  ".mgz":"application/vnd.proteus.magazine",
  ".qps":"application/vnd.publishare-delta-tree",
  ".ptid":"application/vnd.pvi.ptid1",
  ".qxd":"application/vnd.quark.quarkxpress",
  ".qxt":"application/vnd.quark.quarkxpress",
  ".qwd":"application/vnd.quark.quarkxpress",
  ".qwt":"application/vnd.quark.quarkxpress",
  ".qxl":"application/vnd.quark.quarkxpress",
  ".qxb":"application/vnd.quark.quarkxpress",
  ".bed":"application/vnd.realvnc.bed",
  ".mxl":"application/vnd.recordare.musicxml",
  ".musicxml":"application/vnd.recordare.musicxml+xml",
  ".cryptonote":"application/vnd.rig.cryptonote",
  ".cod":"application/vnd.rim.cod",
  ".rm":"application/vnd.rn-realmedia",
  ".rmvb":"application/vnd.rn-realmedia-vbr",
  ".link66":"application/vnd.route66.link66+xml",
  ".st":"application/vnd.sailingtracker.track",
  ".see":"application/vnd.seemail",
  ".sema":"application/vnd.sema",
  ".semd":"application/vnd.semd",
  ".semf":"application/vnd.semf",
  ".ifm":"application/vnd.shana.informed.formdata",
  ".itp":"application/vnd.shana.informed.formtemplate",
  ".iif":"application/vnd.shana.informed.interchange",
  ".ipk":"application/vnd.shana.informed.package",
  ".twd":"application/vnd.simtech-mindmapper",
  ".twds":"application/vnd.simtech-mindmapper",
  ".mmf":"application/vnd.smaf",
  ".teacher":"application/vnd.smart.teacher",
  ".sdkm":"application/vnd.solent.sdkm+xml",
  ".sdkd":"application/vnd.solent.sdkm+xml",
  ".dxp":"application/vnd.spotfire.dxp",
  ".sfs":"application/vnd.spotfire.sfs",
  ".sdc":"application/vnd.stardivision.calc",
  ".sda":"application/vnd.stardivision.draw",
  ".sdd":"application/vnd.stardivision.impress",
  ".smf":"application/vnd.stardivision.math",
  ".sdw":"application/vnd.stardivision.writer",
  ".vor":"application/vnd.stardivision.writer",
  ".sgl":"application/vnd.stardivision.writer-global",
  ".smzip":"application/vnd.stepmania.package",
  ".sm":"application/vnd.stepmania.stepchart",
  ".sxc":"application/vnd.sun.xml.calc",
  ".stc":"application/vnd.sun.xml.calc.template",
  ".sxd":"application/vnd.sun.xml.draw",
  ".std":"application/vnd.sun.xml.draw.template",
  ".sxi":"application/vnd.sun.xml.impress",
  ".sti":"application/vnd.sun.xml.impress.template",
  ".sxm":"application/vnd.sun.xml.math",
  ".sxw":"application/vnd.sun.xml.writer",
  ".sxg":"application/vnd.sun.xml.writer.global",
  ".stw":"application/vnd.sun.xml.writer.template",
  ".sus":"application/vnd.sus-calendar",
  ".susp":"application/vnd.sus-calendar",
  ".svd":"application/vnd.svd",
  ".sis":"application/vnd.symbian.install",
  ".sisx":"application/vnd.symbian.install",
  ".xsm":"application/vnd.syncml+xml",
  ".bdm":"application/vnd.syncml.dm+wbxml",
  ".xdm":"application/vnd.syncml.dm+xml",
  ".tao":"application/vnd.tao.intent-module-archive",
  ".pcap":"application/vnd.tcpdump.pcap",
  ".cap":"application/vnd.tcpdump.pcap",
  ".dmp":"application/vnd.tcpdump.pcap",
  ".tmo":"application/vnd.tmobile-livetv",
  ".tpt":"application/vnd.trid.tpt",
  ".mxs":"application/vnd.triscape.mxs",
  ".tra":"application/vnd.trueapp",
  ".ufd":"application/vnd.ufdl",
  ".ufdl":"application/vnd.ufdl",
  ".utz":"application/vnd.uiq.theme",
  ".umj":"application/vnd.umajin",
  ".unityweb":"application/vnd.unity",
  ".uoml":"application/vnd.uoml+xml",
  ".vcx":"application/vnd.vcx",
  ".vsd":"application/vnd.visio",
  ".vst":"application/vnd.visio",
  ".vss":"application/vnd.visio",
  ".vsw":"application/vnd.visio",
  ".vis":"application/vnd.visionary",
  ".vsf":"application/vnd.vsf",
  ".wbxml":"application/vnd.wap.wbxml",
  ".wmlc":"application/vnd.wap.wmlc",
  ".wmlsc":"application/vnd.wap.wmlscriptc",
  ".wtb":"application/vnd.webturbo",
  ".nbp":"application/vnd.wolfram.player",
  ".wpd":"application/vnd.wordperfect",
  ".wqd":"application/vnd.wqd",
  ".stf":"application/vnd.wt.stf",
  ".xar":"application/vnd.xara",
  ".xfdl":"application/vnd.xfdl",
  ".hvd":"application/vnd.yamaha.hv-dic",
  ".hvs":"application/vnd.yamaha.hv-script",
  ".hvp":"application/vnd.yamaha.hv-voice",
  ".osf":"application/vnd.yamaha.openscoreformat",
  ".osfpvg":"application/vnd.yamaha.openscoreformat.osfpvg+xml",
  ".saf":"application/vnd.yamaha.smaf-audio",
  ".spf":"application/vnd.yamaha.smaf-phrase",
  ".cmp":"application/vnd.yellowriver-custom-menu",
  ".zir":"application/vnd.zul",
  ".zirz":"application/vnd.zul",
  ".zaz":"application/vnd.zzazz.deck+xml",
  ".vxml":"application/voicexml+xml",
  ".wgt":"application/widget",
  ".hlp":"application/winhlp",
  ".wsdl":"application/wsdl+xml",
  ".wspolicy":"application/wspolicy+xml",
  ".7z":"application/x-7z-compressed",
  ".abw":"application/x-abiword",
  ".ace":"application/x-ace-compressed",
  ".dmg":"application/x-apple-diskimage",
  ".aab":"application/x-authorware-bin",
  ".x32":"application/x-authorware-bin",
  ".u32":"application/x-authorware-bin",
  ".vox":"application/x-authorware-bin",
  ".aam":"application/x-authorware-map",
  ".aas":"application/x-authorware-seg",
  ".bcpio":"application/x-bcpio",
  ".torrent":"application/x-bittorrent",
  ".blb":"application/x-blorb",
  ".blorb":"application/x-blorb",
  ".bz":"application/x-bzip",
  ".bz2":"application/x-bzip2",
  ".boz":"application/x-bzip2",
  ".cbr":"application/x-cbr",
  ".cba":"application/x-cbr",
  ".cbt":"application/x-cbr",
  ".cbz":"application/x-cbr",
  ".cb7":"application/x-cbr",
  ".vcd":"application/x-cdlink",
  ".cfs":"application/x-cfs-compressed",
  ".chat":"application/x-chat",
  ".pgn":"application/x-chess-pgn",
  ".nsc":"application/x-conference",
  ".cpio":"application/x-cpio",
  ".csh":"application/x-csh",
  ".deb":"application/x-debian-package",
  ".udeb":"application/x-debian-package",
  ".dgc":"application/x-dgc-compressed",
  ".dir":"application/x-director",
  ".dcr":"application/x-director",
  ".dxr":"application/x-director",
  ".cst":"application/x-director",
  ".cct":"application/x-director",
  ".cxt":"application/x-director",
  ".w3d":"application/x-director",
  ".fgd":"application/x-director",
  ".swa":"application/x-director",
  ".wad":"application/x-doom",
  ".ncx":"application/x-dtbncx+xml",
  ".dtb":"application/x-dtbook+xml",
  ".res":"application/x-dtbresource+xml",
  ".dvi":"application/x-dvi",
  ".evy":"application/x-envoy",
  ".eva":"application/x-eva",
  ".bdf":"application/x-font-bdf",
  ".gsf":"application/x-font-ghostscript",
  ".psf":"application/x-font-linux-psf",
  ".otf":"application/x-font-otf",
  ".pcf":"application/x-font-pcf",
  ".snf":"application/x-font-snf",
  ".ttf":"application/x-font-ttf",
  ".ttc":"application/x-font-ttf",
  ".pfa":"application/x-font-type1",
  ".pfb":"application/x-font-type1",
  ".pfm":"application/x-font-type1",
  ".afm":"application/x-font-type1",
  ".woff":"application/x-font-woff",
  ".arc":"application/x-freearc",
  ".spl":"application/x-futuresplash",
  ".gca":"application/x-gca-compressed",
  ".ulx":"application/x-glulx",
  ".gnumeric":"application/x-gnumeric",
  ".gramps":"application/x-gramps-xml",
  ".gtar":"application/x-gtar",
  ".hdf":"application/x-hdf",
  ".install":"application/x-install-instructions",
  ".iso":"application/x-iso9660-image",
  ".jnlp":"application/x-java-jnlp-file",
  ".latex":"application/x-latex",
  ".lzh":"application/x-lzh-compressed",
  ".lha":"application/x-lzh-compressed",
  ".mie":"application/x-mie",
  ".prc":"application/x-mobipocket-ebook",
  ".mobi":"application/x-mobipocket-ebook",
  ".application":"application/x-ms-application",
  ".lnk":"application/x-ms-shortcut",
  ".wmd":"application/x-ms-wmd",
  ".wmz":"application/x-msmetafile",
  ".xbap":"application/x-ms-xbap",
  ".mdb":"application/x-msaccess",
  ".obd":"application/x-msbinder",
  ".crd":"application/x-mscardfile",
  ".clp":"application/x-msclip",
  ".exe":"application/x-msdownload",
  ".dll":"application/x-msdownload",
  ".com":"application/x-msdownload",
  ".bat":"application/x-msdownload",
  ".msi":"application/x-msdownload",
  ".mvb":"application/x-msmediaview",
  ".m13":"application/x-msmediaview",
  ".m14":"application/x-msmediaview",
  ".wmf":"application/x-msmetafile",
  ".emf":"application/x-msmetafile",
  ".emz":"application/x-msmetafile",
  ".mny":"application/x-msmoney",
  ".pub":"application/x-mspublisher",
  ".scd":"application/x-msschedule",
  ".trm":"application/x-msterminal",
  ".wri":"application/x-mswrite",
  ".nc":"application/x-netcdf",
  ".cdf":"application/x-netcdf",
  ".nzb":"application/x-nzb",
  ".p12":"application/x-pkcs12",
  ".pfx":"application/x-pkcs12",
  ".p7b":"application/x-pkcs7-certificates",
  ".spc":"application/x-pkcs7-certificates",
  ".p7r":"application/x-pkcs7-certreqresp",
  ".rar":"application/x-rar-compressed",
  ".ris":"application/x-research-info-systems",
  ".sh":"application/x-sh",
  ".shar":"application/x-shar",
  ".swf":"application/x-shockwave-flash",
  ".xap":"application/x-silverlight-app",
  ".sql":"application/x-sql",
  ".sit":"application/x-stuffit",
  ".sitx":"application/x-stuffitx",
  ".srt":"application/x-subrip",
  ".sv4cpio":"application/x-sv4cpio",
  ".sv4crc":"application/x-sv4crc",
  ".t3":"application/x-t3vm-image",
  ".gam":"application/x-tads",
  ".tar":"application/x-tar",
  ".tcl":"application/x-tcl",
  ".tex":"application/x-tex",
  ".tfm":"application/x-tex-tfm",
  ".texinfo":"application/x-texinfo",
  ".texi":"application/x-texinfo",
  ".obj":"application/x-tgif",
  ".ustar":"application/x-ustar",
  ".src":"application/x-wais-source",
  ".der":"application/x-x509-ca-cert",
  ".crt":"application/x-x509-ca-cert",
  ".fig":"application/x-xfig",
  ".xlf":"application/x-xliff+xml",
  ".xpi":"application/x-xpinstall",
  ".xz":"application/x-xz",
  ".z1":"application/x-zmachine",
  ".z2":"application/x-zmachine",
  ".z3":"application/x-zmachine",
  ".z4":"application/x-zmachine",
  ".z5":"application/x-zmachine",
  ".z6":"application/x-zmachine",
  ".z7":"application/x-zmachine",
  ".z8":"application/x-zmachine",
  ".xaml":"application/xaml+xml",
  ".xdf":"application/xcap-diff+xml",
  ".xenc":"application/xenc+xml",
  ".xhtml":"application/xhtml+xml",
  ".xht":"application/xhtml+xml",
  ".xml":"application/xml",
  ".xsl":"application/xml",
  ".dtd":"application/xml-dtd",
  ".xop":"application/xop+xml",
  ".xpl":"application/xproc+xml",
  ".xslt":"application/xslt+xml",
  ".xspf":"application/xspf+xml",
  ".mxml":"application/xv+xml",
  ".xhvml":"application/xv+xml",
  ".xvml":"application/xv+xml",
  ".xvm":"application/xv+xml",
  ".yang":"application/yang",
  ".yin":"application/yin+xml",
  ".zip":"application/zip",
  ".adp":"audio/adpcm",
  ".au":"audio/basic",
  ".snd":"audio/basic",
  ".mid":"audio/midi",
  ".midi":"audio/midi",
  ".kar":"audio/midi",
  ".rmi":"audio/midi",
  ".mp4a":"audio/mp4",
  ".mpga":"audio/mpeg",
  ".mp2":"audio/mpeg",
  ".mp2a":"audio/mpeg",
  ".mp3":"audio/mpeg",
  ".m2a":"audio/mpeg",
  ".m3a":"audio/mpeg",
  ".oga":"audio/ogg",
  ".ogg":"audio/ogg",
  ".spx":"audio/ogg",
  ".s3m":"audio/s3m",
  ".sil":"audio/silk",
  ".uva":"audio/vnd.dece.audio",
  ".uvva":"audio/vnd.dece.audio",
  ".eol":"audio/vnd.digital-winds",
  ".dra":"audio/vnd.dra",
  ".dts":"audio/vnd.dts",
  ".dtshd":"audio/vnd.dts.hd",
  ".lvp":"audio/vnd.lucent.voice",
  ".pya":"audio/vnd.ms-playready.media.pya",
  ".ecelp4800":"audio/vnd.nuera.ecelp4800",
  ".ecelp7470":"audio/vnd.nuera.ecelp7470",
  ".ecelp9600":"audio/vnd.nuera.ecelp9600",
  ".rip":"audio/vnd.rip",
  ".weba":"audio/webm",
  ".aac":"audio/x-aac",
  ".aif":"audio/x-aiff",
  ".aiff":"audio/x-aiff",
  ".aifc":"audio/x-aiff",
  ".caf":"audio/x-caf",
  ".flac":"audio/x-flac",
  ".mka":"audio/x-matroska",
  ".m3u":"audio/x-mpegurl",
  ".wax":"audio/x-ms-wax",
  ".wma":"audio/x-ms-wma",
  ".ram":"audio/x-pn-realaudio",
  ".ra":"audio/x-pn-realaudio",
  ".rmp":"audio/x-pn-realaudio-plugin",
  ".wav":"audio/x-wav",
  ".xm":"audio/xm",
  ".cdx":"chemical/x-cdx",
  ".cif":"chemical/x-cif",
  ".cmdf":"chemical/x-cmdf",
  ".cml":"chemical/x-cml",
  ".csml":"chemical/x-csml",
  ".xyz":"chemical/x-xyz",
  ".bmp":"image/bmp",
  ".cgm":"image/cgm",
  ".g3":"image/g3fax",
  ".gif":"image/gif",
  ".ief":"image/ief",
  ".jpeg":"image/jpeg",
  ".jpg":"image/jpeg",
  ".jpe":"image/jpeg",
  ".ktx":"image/ktx",
  ".png":"image/png",
  ".btif":"image/prs.btif",
  ".sgi":"image/sgi",
  ".svg":"image/svg+xml",
  ".svgz":"image/svg+xml",
  ".tiff":"image/tiff",
  ".tif":"image/tiff",
  ".psd":"image/vnd.adobe.photoshop",
  ".uvi":"image/vnd.dece.graphic",
  ".uvvi":"image/vnd.dece.graphic",
  ".uvg":"image/vnd.dece.graphic",
  ".uvvg":"image/vnd.dece.graphic",
  ".sub":"text/vnd.dvb.subtitle",
  ".djvu":"image/vnd.djvu",
  ".djv":"image/vnd.djvu",
  ".dwg":"image/vnd.dwg",
  ".dxf":"image/vnd.dxf",
  ".fbs":"image/vnd.fastbidsheet",
  ".fpx":"image/vnd.fpx",
  ".fst":"image/vnd.fst",
  ".mmr":"image/vnd.fujixerox.edmics-mmr",
  ".rlc":"image/vnd.fujixerox.edmics-rlc",
  ".mdi":"image/vnd.ms-modi",
  ".wdp":"image/vnd.ms-photo",
  ".npx":"image/vnd.net-fpx",
  ".wbmp":"image/vnd.wap.wbmp",
  ".xif":"image/vnd.xiff",
  ".webp":"image/webp",
  ".3ds":"image/x-3ds",
  ".ras":"image/x-cmu-raster",
  ".cmx":"image/x-cmx",
  ".fh":"image/x-freehand",
  ".fhc":"image/x-freehand",
  ".fh4":"image/x-freehand",
  ".fh5":"image/x-freehand",
  ".fh7":"image/x-freehand",
  ".ico":"image/x-icon",
  ".sid":"image/x-mrsid-image",
  ".pcx":"image/x-pcx",
  ".pic":"image/x-pict",
  ".pct":"image/x-pict",
  ".pnm":"image/x-portable-anymap",
  ".pbm":"image/x-portable-bitmap",
  ".pgm":"image/x-portable-graymap",
  ".ppm":"image/x-portable-pixmap",
  ".rgb":"image/x-rgb",
  ".tga":"image/x-tga",
  ".xbm":"image/x-xbitmap",
  ".xpm":"image/x-xpixmap",
  ".xwd":"image/x-xwindowdump",
  ".eml":"message/rfc822",
  ".mime":"message/rfc822",
  ".igs":"model/iges",
  ".iges":"model/iges",
  ".msh":"model/mesh",
  ".mesh":"model/mesh",
  ".silo":"model/mesh",
  ".dae":"model/vnd.collada+xml",
  ".dwf":"model/vnd.dwf",
  ".gdl":"model/vnd.gdl",
  ".gtw":"model/vnd.gtw",
  ".mts":"model/vnd.mts",
  ".vtu":"model/vnd.vtu",
  ".wrl":"model/vrml",
  ".vrml":"model/vrml",
  ".x3db":"model/x3d+binary",
  ".x3dbz":"model/x3d+binary",
  ".x3dv":"model/x3d+vrml",
  ".x3dvz":"model/x3d+vrml",
  ".x3d":"model/x3d+xml",
  ".x3dz":"model/x3d+xml",
  ".appcache":"text/cache-manifest",
  ".ics":"text/calendar",
  ".ifb":"text/calendar",
  ".css":"text/css",
  ".csv":"text/csv",
  ".html":"text/html",
  ".htm":"text/html",
  ".n3":"text/n3",
  ".txt":"text/plain",
  ".text":"text/plain",
  ".conf":"text/plain",
  ".def":"text/plain",
  ".list":"text/plain",
  ".log":"text/plain",
  ".in":"text/plain",
  ".dsc":"text/prs.lines.tag",
  ".rtx":"text/richtext",
  ".sgml":"text/sgml",
  ".sgm":"text/sgml",
  ".tsv":"text/tab-separated-values",
  ".t":"text/troff",
  ".tr":"text/troff",
  ".roff":"text/troff",
  ".man":"text/troff",
  ".me":"text/troff",
  ".ms":"text/troff",
  ".ttl":"text/turtle",
  ".uri":"text/uri-list",
  ".uris":"text/uri-list",
  ".urls":"text/uri-list",
  ".vcard":"text/vcard",
  ".curl":"text/vnd.curl",
  ".dcurl":"text/vnd.curl.dcurl",
  ".scurl":"text/vnd.curl.scurl",
  ".mcurl":"text/vnd.curl.mcurl",
  ".fly":"text/vnd.fly",
  ".flx":"text/vnd.fmi.flexstor",
  ".gv":"text/vnd.graphviz",
  ".3dml":"text/vnd.in3d.3dml",
  ".spot":"text/vnd.in3d.spot",
  ".jad":"text/vnd.sun.j2me.app-descriptor",
  ".wml":"text/vnd.wap.wml",
  ".wmls":"text/vnd.wap.wmlscript",
  ".s":"text/x-asm",
  ".asm":"text/x-asm",
  ".c":"text/x-c",
  ".cc":"text/x-c",
  ".cxx":"text/x-c",
  ".cpp":"text/x-c",
  ".h":"text/x-c",
  ".hh":"text/x-c",
  ".dic":"text/x-c",
  ".f":"text/x-fortran",
  ".for":"text/x-fortran",
  ".f77":"text/x-fortran",
  ".f90":"text/x-fortran",
  ".java":"text/x-java-source",
  ".opml":"text/x-opml",
  ".p":"text/x-pascal",
  ".pas":"text/x-pascal",
  ".nfo":"text/x-nfo",
  ".etx":"text/x-setext",
  ".sfv":"text/x-sfv",
  ".uu":"text/x-uuencode",
  ".vcs":"text/x-vcalendar",
  ".vcf":"text/x-vcard",
  ".3gp":"video/3gpp",
  ".3g2":"video/3gpp2",
  ".h261":"video/h261",
  ".h263":"video/h263",
  ".h264":"video/h264",
  ".jpgv":"video/jpeg",
  ".jpm":"video/jpm",
  ".jpgm":"video/jpm",
  ".mj2":"video/mj2",
  ".mjp2":"video/mj2",
  ".mp4":"video/mp4",
  ".mp4v":"video/mp4",
  ".mpg4":"video/mp4",
  ".mpeg":"video/mpeg",
  ".mpg":"video/mpeg",
  ".mpe":"video/mpeg",
  ".m1v":"video/mpeg",
  ".m2v":"video/mpeg",
  ".ogv":"video/ogg",
  ".qt":"video/quicktime",
  ".mov":"video/quicktime",
  ".uvh":"video/vnd.dece.hd",
  ".uvvh":"video/vnd.dece.hd",
  ".uvm":"video/vnd.dece.mobile",
  ".uvvm":"video/vnd.dece.mobile",
  ".uvp":"video/vnd.dece.pd",
  ".uvvp":"video/vnd.dece.pd",
  ".uvs":"video/vnd.dece.sd",
  ".uvvs":"video/vnd.dece.sd",
  ".uvv":"video/vnd.dece.video",
  ".uvvv":"video/vnd.dece.video",
  ".dvb":"video/vnd.dvb.file",
  ".fvt":"video/vnd.fvt",
  ".mxu":"video/vnd.mpegurl",
  ".m4u":"video/vnd.mpegurl",
  ".pyv":"video/vnd.ms-playready.media.pyv",
  ".uvu":"video/vnd.uvvu.mp4",
  ".uvvu":"video/vnd.uvvu.mp4",
  ".viv":"video/vnd.vivo",
  ".webm":"video/webm",
  ".f4v":"video/x-f4v",
  ".fli":"video/x-fli",
  ".flv":"video/x-flv",
  ".m4v":"video/x-m4v",
  ".mkv":"video/x-matroska",
  ".mk3d":"video/x-matroska",
  ".mks":"video/x-matroska",
  ".mng":"video/x-mng",
  ".asf":"video/x-ms-asf",
  ".asx":"video/x-ms-asf",
  ".vob":"video/x-ms-vob",
  ".wm":"video/x-ms-wm",
  ".wmv":"video/x-ms-wmv",
  ".wmx":"video/x-ms-wmx",
  ".wvx":"video/x-ms-wvx",
  ".avi":"video/x-msvideo",
  ".movie":"video/x-sgi-movie",
  ".smv":"video/x-smv",
  ".ice":"x-conference/x-cooltalk"
});

if (fs.existsSync(
  htaccessPath = polpetta_resolve(HTACCESS_NAME)
)) {
  htaccess = require(
    htaccessPath
  );
}
function invokedHtaccess(
  code,
  method,
  data
) {
  if (htaccess && method in htaccess) {
    event.defaultPrevented = false;
    event.status = code;
    event.type = method.slice(2);
    event.polpetta = this;
    event.request = this.request;
    event.response = this.response;
    // file or path are alias, file might disappear
    event.file = event.path = this.path;
    event.ext = this.ext;
    event.data = data;
    return htaccess[method](event) === false ||
      event.defaultPrevented === true
    ;
  }
  return false;
}
function Polpetta(request, response) {

  var url = request.url;

  // immutable properties
  defineKnownProperty(this, "request", request);
  defineKnownProperty(this, "response", response);

  if (!invokedHtaccess.call(
    this,
    0,
    "onrequest",
    url
  )) {
    polpetta_redirect.call(this, url, true);
    pathname = this.url.pathname;
    this.path = pathname == WEB_SEP ?
      root :
      polpetta_resolve(
        decodeURIComponent(
          pathname
        )
      )
    ;

    if (HIDDEN_FILE.test(pathname)) {
      return forbidden.call(this, stats);
    }

    // request.method switch helper
    ResponseSwitch.call(this);
  }

}

Polpetta.factory = function (request, response) {
  return new Polpetta(request, response);
};

// exports it in case someone would like to use it
freeze(this.Polpetta = Polpetta);
Object.defineProperties(Polpetta.prototype, {

  // [polpetta commons]

  /**
   * Returns a code description
   * assuming you know that 200 is 200
   * and the code you want to know is the
   * static answer provided by a webserver.
   * @param   Number    the response code as number
   * @returns String    the string code associated
   * @example
   *    polpetta.code(200); // "OK"
   *    polpetta.code(404); // "Not Found"
   */
  code: defineKnownGetter("code", polpetta_code),

  /**
   * Returns the content encoding accordingly
   * with the file type. Please note this is
   * just for most common cases and nothing
   * different from "utf-8" or "binary"
   * will be returned (so far)
   * @param   String    the file type
   * @returns String    "utf-8" or "binary"
   * @example
   *    polpetta.encoding("txt"); // => "utf-8"
   *    polpetta.encoding("pdf"); // => "binary"
   */
  encoding: defineKnownGetter("encoding", polpetta_encoding),

  /**
   * Returns a usable object for
   * response.writeHead(code, header)
   * This is mainly used for generic *non* .njs files
   * as shortcut but feel free to enrich
   * the returned object as you need
   * @param   String    the content type to use
   *                    txt, .txt, text/plain, what/ever
   * @returns Object    an object usable as header
   * @example
   *    polpetta.header("txt");
   *    // => {"content-type":"text/plain;charset=utf-8"}
   */
  header: defineKnownGetter("header", polpetta_header),

  /**
   * Redirect to a different page.
   * @param   String    the new page to be redirected
   * @example
   *    polpetta.redirect("/folder/file.html");
   */
  redirect: defineKnownGetter("redirect", polpetta_redirect),

  /**
   * Returns a sanitized absolute path
   * from a generic one, relative or absolute,
   * where if the folder root is not the
   * very first part of the path
   * an empty string is returned instead
   * @param   String    a generic path to resolve
   * @returns String    a rsolved path or an empty string
   */
  resolve: defineKnownGetter("resolve", polpetta_resolve),

  // the root folder for this server
  root: defineKnownGetter("root", root),

  /**
   * Returns a valid type (mime/type)
   * ased on official Apache type to extension file
   * @param   String    a generic etension or type
   * @param   String    optional type, default is "text/html"
   * @returns String    the usable mime or content type
   * @link  http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
   * @example
   *    polpetta.type("txt");   // => "text/plain"
   *    polpetta.type("html");  // => "text/html"
   *    polpetta.type(".js");   // => "application/javascript"
   */
  type: defineKnownGetter("type", polpetta_type),


  // [get, post, file, and cookie]

  // p.get("param"[, "default"]) => $_GET['param'] || 'default'
  // p.get.keys(); => ["g1", "g2", ...]
  get: defineGetter(function () {
    return defineGPF(this, "get", this.url.query);
  }),

  // p.post("param"[, "default"]) => $_POST['param'] || 'default'
  // p.post.keys(); => ["p1", "p2", ...]
  post: defineGetter(function () {
    return emptyGetter;
  }),

  // p.file("param"[, {default}]) => $_FILES['param'] || {default}
  // p.file.keys(); => ["f1", "f2", ...]
  file: defineGetter(function () {
    return emptyGetter;
  }),

  // p.cookie("param"[, "default"]) => $_COOKIE['param'] || 'default'
  // p.cookie.set("param", "value"[, exp[, path[, domain[, secure]]]]);
  // p.cookie.keys(); => ["c1", "c2", ...]
  cookie: defineGetter(function () {
    var
      property = "cookie",
      headersCookie = this.request.headers.cookie,
      cookie = {},
      cookies = []
    ;
    headersCookie &&
    headersCookie.split(/(?:,|;) /).forEach(
      parseCookie, cookie
    );
    return defineNotEnumerableProperty(
      defineKnownProperty(
        defineKnownProperty(
          this,
          property,
          withKeysMethod(
            getValue,
            cookie
          )
        )[property],
        "set",
        setCookie.bind(
          cookies
        )
      ),
      "_", cookies
    );
  }),


  // [output and flush]

  // p.output.push("content");
  // p.output.flush([code[, type[, encoding]]]);
  output: defineGetter(function () {
    var property = "output";
    return defineKnownProperty(
      this,
      property,
      defineKnownProperty(
        [], "flush", flushResponse.bind(this)
      )
    )[property];
  })

});


// [objects properties]
commonDescriptor.value = {};
[
  // p.request => original request object
  "request",

  // p.response => original response object
  "response",

  // p.url => parsed url object with pathname, query, etc
  //          see node.js API require("url").parse(request.url, true)
  "url"

].forEach(defineEachProperty, Polpetta.prototype);


// [strings properties]
commonDescriptor.value = "";
[
  // not empty string only when files have been posted
  "boundary",

  // p.ext; => filename extension
  "ext",

  // p.path; => /usr/name/folder/
  "path"

].forEach(defineEachProperty, Polpetta.prototype);


// [shared version]
commonDescriptor.value = version;
defineProperty(Polpetta.prototype, "version", commonDescriptor);


// wanna trust polpetta instances ?
freeze(Polpetta.prototype);
// don't worry, properties are secured runtime
// per each instance too
// (inheritance does not apply prototype descriptors)

// only if loaded as stand alone
if (!module.parent) {
  // need some help ?
  if (/^--?h(?:elp)?$/i.test(arguments[0])) {
    help();
  }
  // need some folder ?
  else {
    fs.stat(root, function (err, stats) {
      if (err || !stats.isDirectory()) {
        console.log([
          "=======================================================",
          "Unable to use this folder as root:",
          root,
          "-------------------------------------------------------",
          "Try node polpetta --help to know how to start",
          "Or be sure the provided folder exists",
          "======================================================="
        ].join("\n"));
      } else {
        server = http.createServer(Polpetta.factory);
        serverListen(server.on("error", serverListen.error));
      }
    });

  }
}